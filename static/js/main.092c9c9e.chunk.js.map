{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","width","duration","frameSize","isInfinite","useState","indexCurrImg","setIndexCurrImg","maxIndex","maxVisibleIndex","canMovePrev","canMoveNext","itemStyle","transform","transition","className","type","onClick","indexPrevImg","cn","src","alt","style","map","image","imageId","substring","lastIndexOf","String","indexNextImg","App","setWidth","setFrameSize","setStep","animationDuration","setAnimationDuration","setIsInfinite","length","htmlFor","id","value","onChange","e","target","min","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.092c9c9e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step:number;\n  width: number;\n  duration: number;\n  frameSize: number;\n  isInfinite: boolean;\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  step,\n  width,\n  duration,\n  frameSize,\n  isInfinite,\n}) => {\n  const [indexCurrImg, setIndexCurrImg] = useState(0);\n  const minIndex = 0;\n  const maxIndex = 9 * width;\n  const maxVisibleIndex = (9 * width) - (width * (frameSize - 1));\n  const canMovePrev = indexCurrImg - width > minIndex || isInfinite;\n\n  let canMoveNext = indexCurrImg + width < maxIndex || isInfinite;\n\n  if (indexCurrImg === maxVisibleIndex && !isInfinite) {\n    canMoveNext = false;\n  }\n\n  const itemStyle = {\n    transform: `translate(-${indexCurrImg}px)`,\n    transition: `all ${duration}ms`,\n  };\n\n  function handlePrev() {\n    const indexPrevImg = indexCurrImg - (width * step);\n\n    if (indexPrevImg <= minIndex && !isInfinite) {\n      setIndexCurrImg(minIndex);\n    } else if (indexPrevImg < minIndex\n      && isInfinite\n      && indexCurrImg !== minIndex) {\n      setIndexCurrImg(minIndex);\n    } else if (indexPrevImg <= minIndex && isInfinite) {\n      setIndexCurrImg(maxVisibleIndex);\n    } else {\n      setIndexCurrImg(indexCurrImg - (width * step));\n    }\n  }\n\n  function handleNext() {\n    const indexNextImg = indexCurrImg + (width * step);\n\n    if (indexNextImg > maxVisibleIndex && !isInfinite) {\n      setIndexCurrImg(maxVisibleIndex);\n    } else if (indexNextImg > maxVisibleIndex\n      && isInfinite\n      && indexCurrImg !== maxVisibleIndex) {\n      setIndexCurrImg(maxVisibleIndex);\n    } else if (indexNextImg > maxIndex && isInfinite) {\n      setIndexCurrImg(minIndex);\n    } else {\n      setIndexCurrImg(indexNextImg);\n    }\n  }\n\n  return (\n    <div className=\"Carousel\">\n      <button\n        type=\"button\"\n        onClick={handlePrev}\n        aria-disabled={!canMovePrev}\n        className={cn('Carousel__button', {\n          'Carousel__button--active': canMovePrev,\n          'Carousel__button--disactive': !canMovePrev,\n        })}\n      >\n        <img\n          src=\"./icons/arr_left.svg\"\n          alt=\"arrow_left\"\n          className=\"Carousel__icon\"\n        />\n      </button>\n\n      <div\n        className=\"Carousel__container\"\n        style={{ width: `${frameSize * width + 40}px` }}\n      >\n        <ul\n          className=\"Carousel__list\"\n        >\n          {images.map(image => {\n            let imageId = +(image.substring(\n              image.lastIndexOf('.') - 1, image.lastIndexOf('.') + 1,\n            ));\n\n            if (imageId === 0) {\n              imageId = 10;\n            }\n\n            return (\n              <li\n                key={imageId}\n                className=\"Carousel__item\"\n                style={itemStyle}\n\n              >\n                <img\n                  src={`./img/${imageId}.png`}\n                  alt={String(imageId)}\n                  width={width}\n                  className=\"Carousel__image\"\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      <button\n        type=\"button\"\n        data-cy=\"next\"\n        onClick={handleNext}\n        aria-disabled={!canMoveNext}\n        className={cn('Carousel__button', {\n          'Carousel__button--active': canMoveNext,\n          'Carousel__button--disactive': !canMoveNext,\n        })}\n      >\n        <img\n          src=\"./icons/arr_right.svg\"\n          alt=\"arrow_rigth\"\n          className=\"Carousel__icon\"\n        />\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nexport const App: React.FC = () => {\n  const [width, setWidth] = useState(130);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [isInfinite, setIsInfinite] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n      <div className=\"App__inputs\">\n        <label htmlFor=\"itemId\">\n          Item width\n          <input\n            id=\"itemId\"\n            type=\"number\"\n            step={1}\n            className=\"App__input\"\n            value={width}\n            onChange={e => setWidth(+e.target.value)}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\">\n          Frame size\n          <input\n            id=\"frameId\"\n            type=\"number\"\n            className=\"App__input\"\n            value={frameSize}\n            min={1}\n            max={10}\n            onChange={e => setFrameSize(+e.target.value)}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\">\n          Step\n          <input\n            id=\"stepId\"\n            type=\"number\"\n            className=\"App__input\"\n            value={step}\n            min={1}\n            max={5}\n            onChange={e => setStep(+e.target.value)}\n          />\n        </label>\n\n        <label htmlFor=\"animationId\">\n          Animation duration\n          <input\n            id=\"animationId\"\n            type=\"number\"\n            className=\"App__input\"\n            value={animationDuration}\n            onChange={e => setAnimationDuration(+e.target.value)}\n          />\n        </label>\n\n        <label>\n          Infinite\n          <input\n            type=\"checkbox\"\n            className=\"App__input\"\n            onChange={() => setIsInfinite(!isInfinite)}\n          />\n        </label>\n      </div>\n\n      <Carousel\n        images={images}\n        step={step}\n        width={width}\n        duration={animationDuration}\n        frameSize={frameSize}\n        isInfinite={isInfinite}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}